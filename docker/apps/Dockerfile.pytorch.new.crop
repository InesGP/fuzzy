FROM ubuntu:20.04 AS builder

# Used by install scripts
ARG UBUNTU_VERSION=20.04

ENV DEBIAN_FRONTEND noninteractive

# Install common dependencies (so that this step can be cached separately)
ADD resources/pytorch/build-deps-installers/install_base.sh install_base.sh
RUN bash ./install_base.sh && rm install_base.sh

# Install clang
ARG LLVMDEV=yes
ARG CLANG_VERSION=7
ADD resources/pytorch/build-deps-installers/install_clang.sh install_clang.sh
RUN bash ./install_clang.sh && rm install_clang.sh

# Install user
ADD resources/pytorch/build-deps-installers/install_user.sh install_user.sh
RUN bash ./install_user.sh && rm install_user.sh

# Install conda
ENV PATH /opt/conda/bin:$PATH
ARG ANACONDA_PYTHON_VERSION=3.8
ADD resources/pytorch/build-deps-installers/install_conda_new.sh install_conda.sh
RUN bash ./install_conda.sh && rm install_conda.sh

# Install Verificarlo
ARG VERIFICARLO_VERSION=github
ADD resources/pytorch/build-deps-installers/install_verificarlo_new.sh install_verificarlo.sh
RUN bash ./install_verificarlo.sh && rm install_verificarlo.sh

# Install protobuf for ONNX
ARG PROTOBUF=yes
ADD resources/pytorch/build-deps-installers/install_protobuf.sh install_protobuf.sh
RUN if [ -n "${PROTOBUF}" ]; then bash ./install_protobuf.sh; fi
RUN rm install_protobuf.sh
ENV INSTALLED_PROTOBUF ${PROTOBUF}

# Install database packages like LMDB and LevelDB
ARG DB=yes
ADD resources/pytorch/build-deps-installers/install_db.sh install_db.sh
RUN if [ -n "${DB}" ]; then bash ./install_db.sh; fi
RUN rm install_db.sh
ENV INSTALLED_DB ${DB}

# Install vision packages like OpenCV and ffmpeg
ARG VISION=yes
ADD resources/pytorch/build-deps-installers/install_vision.sh install_vision.sh
RUN if [ -n "${VISION}" ]; then bash ./install_vision.sh; fi
RUN rm install_vision.sh
ENV INSTALLED_VISION ${VISION}

# Install ccache/sccache (do this last, so we get priority in PATH)
ADD resources/pytorch/build-deps-installers/install_cache.sh install_cache.sh
ENV PATH /opt/cache/bin:$PATH
RUN bash ./install_cache.sh && rm install_cache.sh

# Install LLVM dev version (Defined in the pytorch/builder github repository)
COPY --from=pytorch/llvm:9.0.1 /opt/llvm /opt/llvm

USER jenkins

# WORKDIR would create it but as root
RUN mkdir /var/lib/jenkins/workspace

WORKDIR /var/lib/jenkins/workspace

RUN git config --global http.postBuffer 524288000  && git clone https://github.com/pytorch/pytorch . && \
    git checkout  490d41aaa61a9c0b12637e40cec066bf0e9515f3 && \ 
    git submodule sync && git submodule update -q --init --recursive
#git checkout 490d41aaa61a9c0b12637e40cec066bf0e9515f3

# Patch build script
ADD resources/pytorch/build_script_patch_new .
RUN git apply build_script_patch_new

# Disable BLAS
ADD resources/pytorch/patch_disabling_blas_new .
RUN git apply --ignore-space-change patch_disabling_blas_new

# Setup function instrumentation
ADD resources/pytorch/script_setting_up_function_instrumentation .
RUN bash script_setting_up_function_instrumentation

ENV IN_CIRCLECI=1 \
    BUILD_ENVIRONMENT=pytorch-linux-bionic-py3.8-verificarlo-build

ARG MAX_JOBS=1

#install specific version of cmake
#ENV CMAKE_VERSION="3.24.1"
#RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh -q -O /tmp/cmake-#install.sh \
#    && chmod u+x /tmp/cmake-install.sh \
#    && sudo mkdir /opt/cmake-${CMAKE_VERSION} \
#    && sudo /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-${CMAKE_VERSION} \
#    && rm /tmp/cmake-install.sh \
#    && sudo ln -s /opt/cmake-${CMAKE_VERSION}/bin/* /usr/local/bin


RUN .ci/pytorch/build.sh && \
    find . -type f -name "*.a" -or -name "*.o" -or -name "*.ll" -delete



CMD ["bash"]
